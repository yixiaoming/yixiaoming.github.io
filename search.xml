<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Android事件分发机制详解]]></title>
      <url>/2018/08/25/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="什么是View事件分发"><a href="#什么是View事件分发" class="headerlink" title="什么是View事件分发"></a>什么是View事件分发</h2><p>这里的事件是指手指触屏到屏幕（Down）到手指离开屏幕（Up，Cancel）以及中间一系列（Move），这一连串的事件也叫事件序列。在Android开发中了解事件分发机制很重要，自定义View以及处理滑动冲突的时候都需要用到。</p>
<p>虽然事件分发时包含了从down到up过程的事件序列，但是这里更倾向去将事件分发定义为事件Down的分发，因为Down事件会决定后续所有事件的走向。下面我们从实际的例子中来看View的事件时怎么分发的。</p>
<a id="more"></a>
<h2 id="事件分发过程"><a href="#事件分发过程" class="headerlink" title="事件分发过程"></a>事件分发过程</h2><p>写一个层级大概如下的视图：</p>
<p><img src="/2018/08/25/Android事件分发机制详解/1.png" alt="1.png"></p>
<p>重写各个层级的Activity，ViewGroup，View的几个关键事件传递的方法。</p>
<ol>
<li>boolean dispatchTouchEvent(MotionEvent ev)</li>
<li>boolean onInterceptTouchEvent(MotionEvent ev)</li>
<li>boolean onTouchEvent(MotionEvent event)</li>
</ol>
<p>注意: </p>
<ol>
<li>这3个方法都用都有相同的输入和输出，输入为事件类型，输出为是否消费事件</li>
<li>Activity 和 View 没有onInterceptTouchEvent，只有ViewGroup才有。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean dispatchTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">        Log.e(TAG, &quot;dispatchTouchEvent: &quot; + ev.getAction());</span><br><span class="line">        return super.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">        Log.e(TAG, &quot;onTouchEvent: &quot; + event.getAction());</span><br><span class="line">        return super.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class FrameLayout1 extends FrameLayout &#123;</span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean dispatchTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">        Log.i(TAG, &quot;dispatchTouchEvent: &quot; + ev.getAction());</span><br><span class="line">        return super.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onInterceptTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">        Log.i(TAG, &quot;onInterceptTouchEvent: &quot; + ev.getAction());</span><br><span class="line">        return super.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">        Log.i(TAG, &quot;onTouchEvent: &quot; + ev.getAction());</span><br><span class="line">        return super.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LinerLayout 同上FrameLayout ……</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class MyTextView extends android.support.v7.widget.AppCompatTextView &#123;</span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean dispatchTouchEvent(MotionEvent event) &#123;</span><br><span class="line">        Log.d(TAG, &quot;dispatchTouchEvent: &quot; + event.getAction());</span><br><span class="line">        return super.dispatchTouchEvent(event);;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">        Log.d(TAG, &quot;onTouchEvent: &quot; + event.getAction());</span><br><span class="line">        return super.dispatchTouchEvent(event);;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-目前的代码没有拦截任何事件，都是直接调用-supper-xxx-传递事件-然后在屏幕上做一个滑动动作，拿到如下事件："><a href="#1-目前的代码没有拦截任何事件，都是直接调用-supper-xxx-传递事件-然后在屏幕上做一个滑动动作，拿到如下事件：" class="headerlink" title="1. 目前的代码没有拦截任何事件，都是直接调用 supper.xxx() 传递事件 然后在屏幕上做一个滑动动作，拿到如下事件："></a>1. <strong>目前的代码没有拦截任何事件，都是直接调用 supper.xxx() 传递事件</strong> 然后在屏幕上做一个滑动动作，拿到如下事件：</h3><p>PS: MotionEvent.getAction() 事件是 int 常量<br>0 -&gt; ACTION_DOWN<br>1 -&gt; ACTION_UP<br>2 -&gt; ACTION_MOVE<br>3 -&gt; ACTION_CANCEL<br>……</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">E/MainActivity: dispatchTouchEvent: 0</span><br><span class="line">I/FrameLayout1: dispatchTouchEvent: 0</span><br><span class="line">I/FrameLayout1: onInterceptTouchEvent: 0</span><br><span class="line">D/Linerlayout1: dispatchTouchEvent: 0</span><br><span class="line">D/Linerlayout1: onInterceptTouchEvent: 0</span><br><span class="line">D/MyTextView: dispatchTouchEvent: 0</span><br><span class="line">D/MyTextView: onTouchEvent: 0</span><br><span class="line">D/Linerlayout1: onTouchEvent: 0</span><br><span class="line">I/FrameLayout1: onTouchEvent: 0</span><br><span class="line">E/MainActivity: onTouchEvent: 0</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 2</span><br><span class="line">E/MainActivity: onTouchEvent: 2</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 2</span><br><span class="line">E/MainActivity: onTouchEvent: 2</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 2</span><br><span class="line">E/MainActivity: onTouchEvent: 2</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 1</span><br><span class="line">E/MainActivity: onTouchEvent: 1</span><br></pre></td></tr></table></figure>
<p>默认传递过程如下：<br>Down事件：从Activity的dispatch -&gt; Viewgroup的dispatch, intercept -&gt; View的 dispatch, ontouch -&gt; 父ViewGroup的 ontouch -&gt; Activity的 ontouch<br>Move事件：全部交给Activity<br>Up事件：  全部交给Activity</p>
<h3 id="2-在Framelayout的dispatchTouchEvent-中的-Down-事件中拦截返回-true，或-false"><a href="#2-在Framelayout的dispatchTouchEvent-中的-Down-事件中拦截返回-true，或-false" class="headerlink" title="2. 在Framelayout的dispatchTouchEvent 中的 Down 事件中拦截返回 true，或 false"></a>2. 在Framelayout的dispatchTouchEvent 中的 Down 事件中拦截返回 true，或 false</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean dispatchTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">    Log.i(TAG, &quot;dispatchTouchEvent: &quot; + ev.getAction());</span><br><span class="line">    switch (ev.getAction()) &#123;</span><br><span class="line">        case MotionEvent.ACTION_DOWN:</span><br><span class="line">            return true; // false</span><br><span class="line">        case MotionEvent.ACTION_MOVE:</span><br><span class="line">            break;</span><br><span class="line">        case MotionEvent.ACTION_UP:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    return super.dispatchTouchEvent(ev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>返回true</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">E/MainActivity: dispatchTouchEvent: 0</span><br><span class="line">I/FrameLayout1: dispatchTouchEvent: 0</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 2</span><br><span class="line">I/FrameLayout1: dispatchTouchEvent: 2</span><br><span class="line">I/FrameLayout1: onTouchEvent: 2</span><br><span class="line">E/MainActivity: onTouchEvent: 2</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 2</span><br><span class="line">I/FrameLayout1: dispatchTouchEvent: 2</span><br><span class="line">I/FrameLayout1: onTouchEvent: 2</span><br><span class="line">E/MainActivity: onTouchEvent: 2</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 1</span><br><span class="line">I/FrameLayout1: dispatchTouchEvent: 1</span><br><span class="line">I/FrameLayout1: onTouchEvent: 1</span><br><span class="line">E/MainActivity: onTouchEvent: 1</span><br></pre></td></tr></table></figure></p>
<p><strong>返回false</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">E/MainActivity: dispatchTouchEvent: 0</span><br><span class="line">I/FrameLayout1: dispatchTouchEvent: 0</span><br><span class="line">E/MainActivity: onTouchEvent: 0</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 2</span><br><span class="line">E/MainActivity: onTouchEvent: 2</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 2</span><br><span class="line">E/MainActivity: onTouchEvent: 2</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 1</span><br><span class="line">E/MainActivity: onTouchEvent: 1</span><br></pre></td></tr></table></figure></p>
<p>得出结论：<br>如果在dispatch中并且事件是down，返回true和false都会导致事件不向子View传递（因为没有调用super.dispatchXXX())，返回true和false的区别在于：</p>
<ol>
<li>返回true表示此view消耗了事件，下一次move事件依然会传递到这里，并且直接传递给onTouchEvent（不在调用onIntercept）</li>
<li>如果返回false，由于Framelayout上一层就是Activity，所以之后的事件都不会再传递下来。</li>
</ol>
<h3 id="3-在Framelayout的onIntercept中且事件未Down时返回true或false"><a href="#3-在Framelayout的onIntercept中且事件未Down时返回true或false" class="headerlink" title="3. 在Framelayout的onIntercept中且事件未Down时返回true或false"></a>3. 在Framelayout的onIntercept中且事件未Down时返回true或false</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public boolean onInterceptTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">    Log.i(TAG, &quot;onInterceptTouchEvent: &quot; + ev.getAction());</span><br><span class="line">    switch (ev.getAction()) &#123;</span><br><span class="line">        case MotionEvent.ACTION_DOWN:</span><br><span class="line">            return true; // false</span><br><span class="line">        case MotionEvent.ACTION_MOVE:</span><br><span class="line">            break;</span><br><span class="line">        case MotionEvent.ACTION_UP:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    return super.onInterceptTouchEvent(ev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>返回true</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">E/MainActivity: dispatchTouchEvent: 0</span><br><span class="line">I/FrameLayout1: dispatchTouchEvent: 0</span><br><span class="line">I/FrameLayout1: onInterceptTouchEvent: 0</span><br><span class="line">I/FrameLayout1: onTouchEvent: 0</span><br><span class="line">E/MainActivity: onTouchEvent: 0</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 2</span><br><span class="line">E/MainActivity: onTouchEvent: 2</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 2</span><br><span class="line">E/MainActivity: onTouchEvent: 2</span><br></pre></td></tr></table></figure></p>
<p><strong>返回false</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">E/MainActivity: dispatchTouchEvent: 0</span><br><span class="line">I/FrameLayout1: dispatchTouchEvent: 0</span><br><span class="line">I/FrameLayout1: onInterceptTouchEvent: 0</span><br><span class="line">D/Linerlayout1: dispatchTouchEvent: 0</span><br><span class="line">D/Linerlayout1: onInterceptTouchEvent: 0</span><br><span class="line">D/Linerlayout1: onTouchEvent: 0</span><br><span class="line">I/FrameLayout1: onTouchEvent: 0</span><br><span class="line">E/MainActivity: onTouchEvent: 0</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 2</span><br><span class="line">E/MainActivity: onTouchEvent: 2</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 2</span><br><span class="line">E/MainActivity: onTouchEvent: 2</span><br></pre></td></tr></table></figure></p>
<p>当事件为Down时，如果onInterceptTouchEvent() </p>
<ol>
<li>返回true，表示拦截，直接调用自己的onTouchEvent，事件不再向下传递</li>
<li>返回false，不拦截（默认），继续传递事件到子view，流程和调用super.onInterceptXXX一样</li>
</ol>
<h3 id="4-在LinearLayout的onTouchEvent中返回true或false"><a href="#4-在LinearLayout的onTouchEvent中返回true或false" class="headerlink" title="4. 在LinearLayout的onTouchEvent中返回true或false"></a>4. 在LinearLayout的onTouchEvent中返回true或false</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public boolean onTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">    Log.i(TAG, &quot;onTouchEvent: &quot; + ev.getAction());</span><br><span class="line">    switch (ev.getAction()) &#123;</span><br><span class="line">        case MotionEvent.ACTION_DOWN:</span><br><span class="line">            return true; // false</span><br><span class="line">        case MotionEvent.ACTION_MOVE:</span><br><span class="line">            break;</span><br><span class="line">        case MotionEvent.ACTION_UP:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    return super.onInterceptTouchEvent(ev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>返回true：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">E/MainActivity: dispatchTouchEvent: 0</span><br><span class="line">I/FrameLayout1: dispatchTouchEvent: 0</span><br><span class="line">I/FrameLayout1: onInterceptTouchEvent: 0</span><br><span class="line">D/Linerlayout1: dispatchTouchEvent: 0</span><br><span class="line">D/Linerlayout1: onInterceptTouchEvent: 0</span><br><span class="line">D/MyTextView: dispatchTouchEvent: 0</span><br><span class="line">D/MyTextView: onTouchEvent: 0</span><br><span class="line">D/Linerlayout1: onTouchEvent: 0</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 2</span><br><span class="line">I/FrameLayout1: dispatchTouchEvent: 2</span><br><span class="line">I/FrameLayout1: onInterceptTouchEvent: 2</span><br><span class="line">D/Linerlayout1: dispatchTouchEvent: 2</span><br><span class="line">--------------未调用自己的 onInterceptTouchEvent</span><br><span class="line">D/Linerlayout1: onTouchEvent: 2</span><br><span class="line">--------------未调用父View的 onTouchEvent</span><br><span class="line">E/MainActivity: onTouchEvent: 2</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 1</span><br><span class="line">I/FrameLayout1: dispatchTouchEvent: 1</span><br><span class="line">I/FrameLayout1: onInterceptTouchEvent: 1</span><br><span class="line">D/Linerlayout1: dispatchTouchEvent: 1</span><br><span class="line">D/Linerlayout1: onTouchEvent: 1</span><br><span class="line">E/MainActivity: onTouchEvent: 1</span><br></pre></td></tr></table></figure>
<p><strong>返回false：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">E/MainActivity: dispatchTouchEvent: 0</span><br><span class="line">I/FrameLayout1: dispatchTouchEvent: 0</span><br><span class="line">I/FrameLayout1: onInterceptTouchEvent: 0</span><br><span class="line">D/Linerlayout1: dispatchTouchEvent: 0</span><br><span class="line">D/Linerlayout1: onInterceptTouchEvent: 0</span><br><span class="line">D/MyTextView: dispatchTouchEvent: 0</span><br><span class="line">D/MyTextView: onTouchEvent: 0</span><br><span class="line">D/Linerlayout1: onTouchEvent: 0</span><br><span class="line">I/FrameLayout1: onTouchEvent: 0</span><br><span class="line">E/MainActivity: onTouchEvent: 0</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 2</span><br><span class="line">E/MainActivity: onTouchEvent: 2</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 2</span><br><span class="line">E/MainActivity: onTouchEvent: 2</span><br><span class="line">E/MainActivity: dispatchTouchEvent: 1</span><br><span class="line">E/MainActivity: onTouchEvent: 1</span><br></pre></td></tr></table></figure>
<p>当事件为Down时，如果onTouchEvent：</p>
<p><strong>返回true：</strong>表示事件被此view消耗，之后所有move，cancel事件都会按照从上到下的路径传递到此view。但是需要注意，这个过程中<strong>自己的onIntercept没有被调用</strong>，并且<strong>自己的onTouchEvent之后直接调用Activity的onTouchevent，没有走Framelayout的onTouch</strong>。</p>
<p><strong>返回false：</strong>表示不消费事件，onTouch继续上传给父View，直到Activity，之后所有event都由Activity消费。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>对于事件Down来说非常重要，因为它决定了后续事件的流向。下图只是对于Down事件的一些case，还有很多case图上没有表现，可参考上面集中4种情况的log分析。</p>
<p><img src="/2018/08/25/Android事件分发机制详解/WX20180825-170921.png" alt="WX20180825-170921"></p>
<p>对于Down事件决定事件的流向可以这样理解，如果事件为Down时候，如果在dispatchTouchEvent 和 onTouchevent中只要返回true，那么该View会收到后续的所有事件。<strong>因为事件传递过程中记录了一个mFirstTouchTarget的对象，表示消费事件的view，如果确定了这个target那么事件会直接交给target处理。</strong></p>
<p>如果Down事件按照默认流程U型传递一圈发现没有消耗Down事件，那么后续事件也没有必要再向下传递，Activity直接消耗完即可。</p>
<p><strong>PS: 还有一个需要注意的地方，如果一个View的clickable或者longclickable的属性被设置为true，那么在它的onTouchEvent中会默认返回true。比如Button。这会导致默认情况它就会消耗事件</strong></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> 事件分发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gradle3.0多渠道打包详解]]></title>
      <url>/2017/12/31/Gradle3-0%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>Android开发中，经常我们需要打不同的包，常用的维度就是debug，release，多个渠道等，如果每个包都需要对应一份代码，那么工作量就巨大并且难以维护（修改代码需要修改多处）。Android中使用Gradle打包，可以很好的解决打包这个问题，提供了充分的可配置选项，让我们在很多维度控制打包的细节，非常灵活，推荐看官方文档（墙外）。</p>
<a id="more"></a>
<h2 id="productFlavor"><a href="#productFlavor" class="headerlink" title="productFlavor"></a>productFlavor</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>productFlavor：产品风味。在多渠道打包是一般使用这个属性，可根据不同的渠道配置不同的内容。Gradle3.0之后配置flavor与之前略有不同，需要强制设置flavor的维度：flavorDimensions，否则gradle会报错，来个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flavorDimensions(&apos;money&apos;)</span><br><span class="line">productFlavors &#123;</span><br><span class="line">    free &#123;</span><br><span class="line">        dimension &apos;money&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    paid &#123;</span><br><span class="line">        dimension &apos;money&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例子中定义了一个产品风味维度：money（是否需要钱钱），然后定义了两种风味：free和paid，注意两种风味的<code>dimension</code>属性相同都是<code>money</code>。然后使用<code>./gradlew assemble</code>打包，如果你配置了你会发现app/build/outputs/apk 下会打出这些包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apk/</span><br><span class="line">	free/</span><br><span class="line">		debug/</span><br><span class="line">			xxx.apk</span><br><span class="line">		release/</span><br><span class="line">			xxx.apk</span><br><span class="line">	paid/</span><br><span class="line">		debug/</span><br><span class="line">			xxx.apk</span><br><span class="line">		release/</span><br><span class="line">			xxx.apk</span><br></pre></td></tr></table></figure>
<p>xxx.apk 命名规则是：<code>app-flavor-buildtype.apk</code></p>
<p><code>./gradlew assemble</code>很粗暴，会打出所有的包。如果你只想打一个包，比如：paid的release包，那么可以使用以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew assemblePaidRelease</span><br></pre></td></tr></table></figure>
<p>规则：<code>./gradlew assembleFlavorBuildtype</code>, buildtype（构建类型）指debug or release or 自己配置的buildtype。</p>
<h3 id="flavorDimensions"><a href="#flavorDimensions" class="headerlink" title="flavorDimensions"></a>flavorDimensions</h3><p>产品风味维度，打包时可以使用多个维度组合的方式。例如定义下面这种方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">flavorDimensions(&apos;money&apos;, &apos;channel&apos;)</span><br><span class="line">productFlavors &#123;</span><br><span class="line">    free &#123;</span><br><span class="line">        dimension &apos;money&apos;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    paid &#123;</span><br><span class="line">        dimension &apos;money&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    baidu &#123;</span><br><span class="line">        dimension &apos;channel&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    wandoujia &#123;</span><br><span class="line">        dimension &apos;channel&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后<code>./gradlew assemble</code>会打出 2x2=4个包，gralde会自动将两个维度的品味组合打包：free-baidu.apk, paid-baidu.apk, free-wandoujia.apk, paid-wandoujia.apk …</p>
<h3 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h3><p>关于不同的风味需要配置哪些属性，这里就不细讲，感兴趣自己查文档。我这里遇到一个需求是，不同的产品风味，需要依赖不同的lib。例如：我有两套log系统（一套会上传log，一套不会），分别写在两个lib中，主工程中定义了Log.java继承与两个lib中的BaseLog.java，BaseLog.java中控制log的细节。现在需要根据log这个风味维度打出两种不同log的包。大概配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">flavorDimensions(&apos;log&apos;)</span><br><span class="line">productFlavors &#123;</span><br><span class="line">    online &#123;</span><br><span class="line">        dimension &apos;log&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    local &#123;</span><br><span class="line">        dimension &apos;log&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    onlineImplementation project(&apos;:libs:lib-log-online&apos;)</span><br><span class="line">    localImplementation project(&apos;:libs:lib-log-local&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要看dependencies中两个配置：<code>onlineImplementation</code>，<code>localImplementation</code>分配表示online和local两种风味依赖两个本地不同的lib。gradle3.0之前是使用 <code>comple xxx</code>这里需要注意修改成<code>implementation</code>，命名规则依然是: <code>flavorImplementation</code>。</p>
<p>这样就可以实现根据不同的风味，控制不同的依赖。具体的配置还有很多内容，推荐看官方文档，这里不再累述。</p>
<h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p><a href="https://developer.android.com/studio/build/build-variants.html" target="_blank" rel="noopener">https://developer.android.com/studio/build/build-variants.html</a></p>
<p><a href="https://developer.android.com/studio/build/index.html" target="_blank" rel="noopener">https://developer.android.com/studio/build/index.html</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 打包 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo命令清单]]></title>
      <url>/2017/12/18/Hexo%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</url>
      <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>创建文章, layout可使用 post(默认), draft(草稿), page …</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &quot;Article Name&quot;</span><br></pre></td></tr></table></figure>
<p>发布草稿</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p>生成静态文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>发布更新</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>生成并发布</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>
<p>启动本地server查看, 默认： localhost:4000, 可自行指定参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>
<p>生成并预览</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s -g</span><br></pre></td></tr></table></figure>
<h2 id="官方地址"><a href="#官方地址" class="headerlink" title="官方地址"></a>官方地址</h2><p><a href="https://hexo.io" target="_blank" rel="noopener">https://hexo.io</a></p>
<p><a href="https://hexo.io/docs/" target="_blank" rel="noopener">https://hexo.io/docs/</a></p>
<p><a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">https://hexo.io/docs/troubleshooting.html</a></p>
<p><a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">https://github.com/hexojs/hexo/issues</a></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
